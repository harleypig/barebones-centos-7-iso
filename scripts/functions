#!/bin/bash

#=============================================================================
# Function definitions

warn() { printf '%s\n' "$*" >&2; }

die() {
  (($#)) && warn "$*"
  exit 1
}

runit() {
  local rc=0
  warn "$@"
  "$@" || {
    rc=$?
    warn "Problem running cmd (rc: $rc)"
  }

  return $rc
}

[[ -z $BASE_URL ]] && die 'BASE_URL not set, not continuing.'
[[ -z $FILES_URL ]] && die 'FILES_URL not set, not continuing'

#-----------------------------------------------------------------------------
run_remote() {
  remote=$1

  warn "
==============================================================
Running $remote ...
"

  # Download text from 'remote' and have bash execute it.
  curl -sS "$remote" | /bin/bash -s "$@"

  warn "
Done running $remote.
=============================================================="
}

#export -f run_remote

#-----------------------------------------------------------------------------
# Make boot up noisy and set the latest kernel to be the default (non openvz)

# shellcheck disable=2120
set_boot_kernel() {
  local k

  for k in /boot/vmlinuz*; do
    grubby --update-kernel="$k" --remove-args='rhgb quiet'
  done

  # ls -v sorts by 'natural' version numbers in the name. We want the last, or
  # latest, version of the kernel.

  # NOTE: find | sort -V  might work here.

  # shellcheck disable=SC2012
  grubby --set-default="$(ls -1v "/boot/vmlinuz-*$1" | tail -1)"
}

#export -f set_boot_kernel

#-----------------------------------------------------------------------------
install_file() {
  local URL=$1
  local LOC=$2

  warn "Installing $(basename "$URL") ..."

  local FILE_DIR
  FILE_DIR=$(dirname "$LOC")

  [[ -e $FILE_DIR ]] || runit mkdir -p "$FILE_DIR" || return

  [[ -d $FILE_DIR ]] || {
    warn "$FILE_DIR exists and is not a directory, not continuing"
    return 1
  }

  [[ -n $FILE_DIR_CHMOD ]] && runit chmod "$FILE_DIR_CHMOD" "$FILE_DIR" || return

  runit curl -LSso "$LOC" "$URL" || return

  [[ -n $FILE_CHMOD ]] && runit chmod "$FILE_CHMOD" "$LOC" || return

  return 0
}

#export -f install_file

#-----------------------------------------------------------------------------
install_verify_system() {
  local VERIFY_SYSTEM_URL=${VERIFY_SYSTEM_URL:-$FILES_URL/util/verify_system}
  local VERIFY_SYSTEM_LOC=${VERIFY_SYSTEM_LOC:-/root/verify_system}
  local FILE_DIR_CHMOD=
  local FILE_CHMOD=0700

  install_file "$VERIFY_SYSTEM_URL" "$VERIFY_SYSTEM_LOC"
}

#export -f install_verify_system

#-----------------------------------------------------------------------------
install_perlbrew_script() {
  local INSTALL_PERLBREW_URL=${INSTALL_PERLBREW_URL:-$KS_FILES_URL/util/install_perlbrew}
  local INSTALL_PERLBREW_LOC=${INSTALL_PERLBREW_LOC:-/root/install_perlbrew}
  local FILE_DIR_CHMOD=
  local FILE_CHMOD=0700

  install_file "$INSTALL_PERLBREW_URL" "$INSTALL_PERLBREW_LOC"
}

#export -f install_perlbrew_script

#-----------------------------------------------------------------------------
install_repos_script() {
  local INSTALL_REPOS_URL=${INSTALL_REPOS_URL:-$KS_FILES_URL/util/install_repos}
  local INSTALL_REPOS_LOC=${INSTALL_REPOS_LOC:-/root/install_repos}
  local FILE_DIR_CHMOD=
  local FILE_CHMOD=0700

  install_file "$INSTALL_REPOS_URL" "$INSTALL_REPOS_LOC"
}

#export -f install_repos_script

#-----------------------------------------------------------------------------
install_auth_keys() {
  local AUTH_KEYS='authorized_keys'
  local AUTH_KEYS_URL=${AUTH_KEYS_URL:-$FILES_URL/dotfiles/$AUTH_KEYS}
  local AUTH_KEYS_LOC=${AUTH_KEYS_LOC:-/root/.ssh/$(basename "$AUTH_KEYS_URL")}
  local FILE_DIR_CHMOD=0700
  local FILE_CHMOD=0644

  install_file "$AUTH_KEYS_URL" "$AUTH_KEYS_LOC"
}

#export -f install_auth_keys

#-----------------------------------------------------------------------------
install_bash_dotfiles() {
  local BASHRC_URL=${BASHRC_URL:-$FILES_URL/dotfiles/bashrc}
  local BASHRC_LOC=${BASHRC_LOC:-/root/.bashrc}
  local FILE_DIR_CHMOD=
  local FILE_CHMOD=0655

  install_file "$BASHRC_URL" "$BASHRC_LOC"
}

#export -f install_bash_dotfiles

#-----------------------------------------------------------------------------
install_packages() {
  [[ -z $PKGS ]] && {
    warn "PKGS not set, nothing to do."
    return 1
  }

  runit yum -y --skip-broken install "$PKGS"
}

#export -f install_packages

#-----------------------------------------------------------------------------
fix_ifcfg() {
  net_scripts='/etc/sysconfig/network-scripts'

  readarray -t links < <(find /sys/class/net)

  #for link in $(ls /sys/class/net | grep -v lo); do
  for link in "${links[@]}"; do
    [[ $link == 'lo' ]] && continue

    link_path="${net_scripts}/ifcfg-$(basename "$link")"

    warn "Fix $link_path ..."
    runit perl -pi -e 's/^((?:HWADDR|UUID|GATEWAY)=.*)$/#$1/' "$link_path"
  done
}

#export -f fix_ifcfg

#-----------------------------------------------------------------------------
fix_udev() {
  persist_net='/etc/udev/rules.d/70-persistent-net.rules'

  if [[ -e $persist_net ]]; then
    warn 'Fix udev net rules ...'
    runit perl -pi -e 's/(ATTR{address}==")[^"]*"/$1*"/' $persist_net
  fi
}

#export -f fix_udev

#-----------------------------------------------------------------------------
post_install() {
  warn "Starting post install steps ..."

  install_auth_keys
  install_bash_dotfiles
  install_perlbrew_script
  install_repos_script
  install_verify_system

  install_packages

  fix_ifcfg
  fix_udev
  set_boot_kernel "$1"

  warn 'Remove selinux directory ...'
  runit rm -rf /etc/selinux/targeted

  warn 'Remove unneeded firmware packages ...'
  firmware=$(rpm -qa \*firmware\* | grep -Ev 'kernel|linux')

  [[ -n $firmware ]] && runit rpm -e "$firmware" || return

  warn 'Update ... for some reason not all the latest files are chosen during the initial install ...'
  runit yum -y --skip-broken update

  warn 'Some yum cache cleanup ...'
  runit yum clean expire-cache
  runit yum clean all
}

#export -f post_install
